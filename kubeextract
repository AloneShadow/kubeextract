#!/usr/bin/python3

""" Get all kubernetes secrets from several or all namespaces """
import subprocess
import yaml
import base64
import sys

namespaces = []

def get_secrets(namespace, secret):
    """ Extract a value from the given secret """
    kube_secrets = subprocess.check_output("kubectl get secret -n "+namespace+" -o yaml "+secret, shell=True)
    kube_secrets_data = yaml.load(kube_secrets)["data"]
    for k,v in kube_secrets_data.items():
        decoded_v = base64.b64decode(v)
        try:
          print ('\t\t\x1b[1;32;40m'+k,": \x1b[0m", decoded_v.decode())
          #print ('\t\t\x1b[1;32;40m'+k,": \x1b[0m")
        except:
          print ('\t\t\x1b[1;31;40mBINARY SECRET '+k,": \x1b[0m", v)

def get_namespaces():
    """ Get a list of all available namespaces """
    kube_namespaces = subprocess.check_output("kubectl get namespaces", shell=True).decode().split('\n')[1:]
    for i in range (0, len(kube_namespaces)):
      if kube_namespaces[i]:
        namespaces.append(kube_namespaces[i].split()[0])


# get all secrets from all namespaces
# or get secrets from given namespaces
if len(sys.argv) > 1:
    for i in range(1, len(sys.argv)):
        namespaces.append(sys.argv[i])
else:
    get_namespaces()

for namespace in namespaces:
    print ('\x1b[1;32;40m*',namespace,': \x1b[0m')
    kube_secrets = subprocess.check_output("kubectl get secret -n "+namespace, shell=True).decode().split('\n')[1:]
    flag = False
    for line in kube_secrets:
        line = line.split()[:-1]
        if line and 'default-token-' not in line[0]:
            if flag: print ('-'*120)
            else: flag = True
            print ('\t', 'name:','\x1b[1;32;40m', line[0], '\x1b[0m','type:','\x1b[1;32;40m', line[1], '\x1b[0m', 'count:', '\x1b[1;32;40m', line[2], '\x1b[0m')
            get_secrets(namespace, line[0])
    print('='*150)
